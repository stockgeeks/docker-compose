version: '3.8'

services:

  # https://hub.docker.com/r/confluentinc/cp-kafka/
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:29092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # Whether or not to automatically create topics in case the topic does not exist
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  # Confluent Schema Registry Docker image see: https://hub.docker.com/r/confluentinc/cp-schema-registry
  # Schema Registry: http://localhost:8081
  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    container_name: schema-registry
    hostname: schema-registry
    restart: always
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  # https://hub.docker.com/r/confluentinc/cp-zookeeper/
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - TZ=${TZ}
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge